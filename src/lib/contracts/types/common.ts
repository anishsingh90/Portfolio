
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  ContractTransaction,
  ContractTransactionResponse,
  EventFragment,
  FunctionFragment,
  Interface,
} from "ethers";
import type { Listener, Provider } from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
} from "./common.d";

export type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
};

export interface TypedEventLog<TEvent extends TypedContractEvent>
  extends Omit<
    EventLog,
    "args" | "getTransaction" | "getTransactionReceipt"
  > {
  args: TEvent["args"];
  getTransaction(): Promise<ContractTransactionResponse>;
  getTransactionReceipt(): Promise<ContractTransaction>;
}

export interface TypedContractEvent<
  TInputArgs extends Array<any> = any,
  TOutputArgs extends Array<any> = TInputArgs,
  TOutputObject = Record<string, any>
> {
  (...args: TInputArgs): TypedContractEvent<
    TInputArgs,
    TOutputArgs,
    TOutputObject
  >;
  name: string;
  signature: string;
  fragment: EventFragment;
  getFragment(...args: TInputArgs): EventFragment;
  args: TOutputArgs & TOutputObject;
}

    